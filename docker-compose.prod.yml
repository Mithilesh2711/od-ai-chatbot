# =============================================================================
# Production Docker Compose Configuration
# Optimized for production deployment with security and performance improvements
# =============================================================================

version: '3.8'

services:
  od-ai-chatbot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Application environment
      - ENVIRONMENT=production
      
      # Redis configuration
      - REDIS_URL=redis://redis:6379
      
      # Load environment variables from file (if exists)
      - ENV_FILE=.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend
    volumes:
      # Minimal volume mounting for production
      - ./logs:/app/logs
      - ./data:/app/data
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Network configuration
networks:
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: od-ai-backend
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volume configuration
volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

# =============================================================================
# Production Notes:
# - Uses health checks for service dependencies
# - Configures resource limits for stability
# - Implements logging with rotation
# - Uses persistent volumes for data
# - Isolated network for security
# - Environment-specific optimizations
# =============================================================================
